version: '3'

vars:
  BINARY_NAME: qasmfmt
  BUILD_DIR: bin
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0-dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  gen:
    desc: Generate parser code from ANTLR grammar files
    cmds:
      - wget https://raw.githubusercontent.com/openqasm/openqasm/refs/heads/main/source/grammar/qasm3Lexer.g4
      - wget https://raw.githubusercontent.com/openqasm/openqasm/refs/heads/main/source/grammar/qasm3Parser.g4
      - pip install antlr4-tools
      - antlr4 -Dlanguage=Go -visitor -o ./gen/parser -package parser qasm3Lexer.g4 qasm3Parser.g4

  # Build tasks
  build:
    desc: Build the application
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} .
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  build:all:
    desc: Build for all platforms
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - task: build:linux
      - task: build:darwin
      - task: build:windows

  build:linux:
    desc: Build for Linux (amd64)
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 .

  build:darwin:
    desc: Build for macOS (amd64 and arm64)
    cmds:
      - task: build:darwin:amd64
      - task: build:darwin:arm64

  build:darwin:amd64:
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 .

  build:darwin:arm64:
    env:
      GOOS: darwin
      GOARCH: arm64
    cmds:
      - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 .

  build:windows:
    desc: Build for Windows (amd64)
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - go build -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe .

  # Development tasks
  dev:
    desc: Run in development mode with live reload
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CLI_ARGS}}

  install:
    desc: Install the binary to $GOPATH/bin
    cmds:
      - go install -ldflags "-X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.buildDate={{.BUILD_DATE}}" .

  # Testing tasks
  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  test:race:
    desc: Run tests with race detection
    cmds:
      - go test -v -race ./...

  bench:
    desc: Run benchmarks
    cmds:
      - go test -v -bench=. -benchmem ./...

  # Code quality tasks
  lint:
    desc: Run linters
    cmds:
      - go fmt ./...
      - go vet ./...
      - task: lint:golangci

  lint:golangci:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run
    status:
      - command -v golangci-lint >/dev/null 2>&1

  lint:install:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...
      - gofumpt -w .
    status:
      - command -v gofumpt >/dev/null 2>&1

  fmt:install:
    desc: Install gofumpt
    cmds:
      - go install mvdan.cc/gofumpt@latest

  # Dependency management
  deps:
    desc: Download dependencies
    cmds:
      - go mod download

  deps:tidy:
    desc: Tidy dependencies
    cmds:
      - go mod tidy

  deps:verify:
    desc: Verify dependencies
    cmds:
      - go mod verify

  deps:update:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  # Example and demo tasks
  demo:
    desc: Run formatter on example file
    deps: [build]
    cmds:
      - echo "=== Original file ==="
      - cat example.qasm
      - echo -e "\n=== Formatted output ==="
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} format example.qasm

  demo:diff:
    desc: Show diff of formatting changes
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} format -d example.qasm

  demo:write:
    desc: Format example file in place
    deps: [build]
    cmds:
      - cp example.qasm example.qasm.bak
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} format -w example.qasm
      - echo "=== Changes applied ==="
      - diff example.qasm.bak example.qasm || true
      - mv example.qasm.bak example.qasm

  example:create:
    desc: Create more example QASM files for testing
    cmds:
      - mkdir -p examples
      - |
        cat > examples/bell_state.qasm << 'EOF'
        OPENQASM 3.0;
        include "stdgates.qasm";
        
        qubit[2] q;
        bit[2] c;
        
        h q[0];
        cx q[0], q[1];
        measure q -> c;
        EOF
      - |
        cat > examples/grover.qasm << 'EOF'
        OPENQASM 3.0;
        include "stdgates.qasm";
        
        qubit[3] q;
        bit[3] c;
        
        // Initialize superposition
        h q[0];
        h q[1];
        h q[2];
        
        // Oracle
        cz q[0], q[2];
        cz q[1], q[2];
        
        // Diffuser
        h q[0];
        h q[1];
        h q[2];
        x q[0];
        x q[1];
        x q[2];
        ccx q[0], q[1], q[2];
        x q[0];
        x q[1];
        x q[2];
        h q[0];
        h q[1];
        h q[2];
        
        measure q -> c;
        EOF

  # Documentation tasks
  docs:
    desc: Generate documentation
    cmds:
      - go doc -all . > docs/api.md

  docs:serve:
    desc: Serve documentation locally
    cmds:
      - godoc -http=:6060
    status:
      - command -v godoc >/dev/null 2>&1

  # Release tasks
  release:
    desc: Create a release
    deps: [test, lint, build:all]
    cmds:
      - echo "Release {{.VERSION}} built successfully"
      - ls -la {{.BUILD_DIR}}/

  # Cleanup tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -f coverage.out coverage.html

  clean:all:
    desc: Clean all generated files
    cmds:
      - task: clean
      - go clean -cache -testcache -modcache

  # CI/CD tasks
  ci:
    desc: Run CI pipeline locally
    cmds:
      - task: deps:verify
      - task: lint
      - task: test:race
      - task: test:coverage
      - task: build:all

  # Git hooks
  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: fmt
      - task: lint
      - task: test

  # Development environment setup
  setup:
    desc: Setup development environment
    cmds:
      - task: deps
      - task: lint:install
      - task: fmt:install
      - task: example:create
      - echo "Development environment setup complete!"

  # Version info
  version:
    desc: Show version information
    cmds:
      - echo "Version{{":"}} {{.VERSION}}"
      - echo "Commit{{":"}} {{.COMMIT}}"
      - echo "Build Date{{":"}} {{.BUILD_DATE}}"
      - echo "Go Version{{":"}} $(go version)"